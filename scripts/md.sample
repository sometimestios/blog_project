[TOC]

# 重要的Python内建函数

# zip()

用于打包多个列表、元组、range对象，并生成一个遍历对象（Python3无法直接打印）。

如果列表的长度不相同，取最短的长度。

```python
A=[1,2,3,4]
B=[5,6,7,8]
zipped=zip(A,B)
print(list(zipped))  # 可以转为列表
>[(1, 5), (2, 6), (3, 7), (4, 8)]

print(dict(zipped))  # 可以借此将两个长度相同的列表转为字典，十分方便
>{1: 5, 2: 6, 3: 7, 4: 8}

a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
a_T=list(zip(*a))  # zip(*a)可以理解为‘unzip’，能够借此实现转置
print(a_T)
>[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
```

# strip()

**strip()**用于去除**头尾**特定字符，**lstrip()**用于去除**开头**字符，**rstrip()**用于去除**尾部**字符。以strip()为例：

```python
string="abcdeaa"
print(string.strip('a'))  # 默认删除\n、\r、\t、' '，即：换行、回车、制表符、空格
>'bcde'
```

# (&,|)和(and, or)

* 如果对象是**bool类型**，则两组符号作用一致。

* 如果对象是**数值型变量**，则(&,|)表示二进制位运算；(and, or)表示通过“判零进行短路”。具体如下：

  ```python
  print(2 and 3, 2 or 3)
  >3 2  # 无零值时，and返回最后一个值，or返回第一个值
  print(0 and 3, 0 or 3)
  >0 3  # 含零值时，and返回0，or返回第一个非零值
  ```

* 如果对象是**字符串**，则(&,|)不支持；(and or)表示通过“判空进行短路”。具体如下（空格不算空值）：

  ```python
  print(' ' and 'B', ' ' or 'B')
  >'B' ' '  # 无空值时，and返回最后一个值，or返回第一个值
  print('' and 'B', '' or 'B')
  >'B'  # 含空值时，and返回空值，or返回第一个非空值
  ```

# map()/reduce()

* `map(f,L)`可以理解为函数的**复用/重现**，接受两个参数，第一个是函数f（接受一个参数），第二个是可迭代对象L。

  作用是将L里的每一个元素都传入f中，返回由结果构成的序列**（返回一个map对象，不能直接打印，可以先转成list和tuple）**

  ```python
  def f(x):
      return x*x
  r=map(f,[1,2,3,4])
  print(list[r])
  >[1,4,9,16]
  ```

* `reduce(f,L)`可以理解为函数的**累积**，接受两个参数，第一个是函数f（接受两个参数x，y），第二个是可迭代对象L。

  作用是将每次f运算的结果，和L中的下一个元素作为参数传入f中进行运算，最后返回的是所有运算累积的结果。`reduce(f, [x1, x2, x3, x4]) `等同于` f(f(f(x1, x2), x3), x4)`

  ```python
  from functools import reduce
  def f(x,y):
      return x*y
  r=reduce(f,[1,2,3,4])
  print(r)
  >24
  ```

# filter()

`filter(is_wanted,L)`接受两个参数，第一个是筛选条件函数is_wanted，返回值为bool类型，另一个是可迭代对象L。

作用是**筛选符合条件的元素**，删除不符合条件的元素（与map有类似之处）。

```python
def is_palindrome(n):
    n=str(n)
    if n==n[::-1]:  # 回文数的正向与逆向序列相同
        return True
    else:
        return False
r=list(filter(is_palindrome,range(1000)))  # 求1000以内的回文数
```

# sorted()

* `sorted(L)`默认接受一个参数即可迭代对象L，按照数值大小**（或字符串首字母的ASCII值）**，从小到大进行排序。可以添加一个函数作为key参数，改变排序的依据，如下：

```python
sorted([36, 5, -12, 9, -21], key=abs)  # key参数的类型是函数，将这个函数作用在所有元素上，再依据输出值进行排序
sorted([36, 5, -12, 9, -21], key=abs,reverse=True)  # 添加reverse参数即可实现逆序
```

* 列表类型自带.sort()方法，参数与上述相同；**此方式直接改变原对象的元素顺序**。

  ```python
  A=[2,1,4,3]
  A.sort()  # 此时A内的元素顺序已经改变，但是A所指向的地址并未改变
  print(A)
  >[1,2,3,4]
  ```


# find()与index()

* `.find(sub)`可作用于**字符串**，查找子字符串sub并返回找到的首字符下标（有多个则只返回第一个），若不存在则返回-1。
* `.index(x)`可作用于**元组、列表以及字符串**，可用于按值查找和子字符串查找，若不存在则报错`ValueError`

## random系

`random.random()`函数是这个模块中最常用的方法了，它会生成一个随机的浮点数，范围是在0.0~1.0之间。

`random.uniform()`正好弥补了上面函数的不足，它可以设定浮点数的范围，一个是上限，一个是下限。

`random.randint()`随机生一个整数int类型，可以指定这个整数的范围，同样有上限和下限值。

`random.choice()`可以从任何序列，比如list列表中，选取一个随机的元素返回，可以用于字符串、列表、元组等。

`random.shuffle()`如果你想将一个序列中的元素，随机打乱的话可以用这个函数方法。

`random.sample()`可以从指定的序列中，随机的截取指定长度的片断，不作原地修改。